#! /usr/bin/env bash

set -e -o pipefail

url=
rev=
expHash=
hashType=$NIX_HASH_ALGO
deepClone=$NIX_PREFETCH_GIT_DEEP_CLONE
leaveDotGit=$NIX_PREFETCH_GIT_LEAVE_DOT_GIT
fetchSubmodules=
builder=
branchName=$NIX_PREFETCH_GIT_BRANCH_NAME

if test -n "$deepClone"; then
    deepClone=true
else
    deepClone=false
fi

if test "$leaveDotGit" != 1; then
    leaveDotGit=
else
    leaveDotGit=true
fi

usage(){
cat >&2 <<'USAGE'
syntax: nix-prefetch-git [options] [URL [REVISION [EXPECTED-HASH]]]

Options:
    --out path      Path where the output would be stored.
    --url url       Any url understand by 'git clone'.
    --rev ref       Any sha1 or references (such as refs/heads/master)
    --hash h        Expected hash.
    --deepClone     Clone the entire repository.
    --no-deepClone  Make a shallow clone of just the required ref.
    --leave-dotGit  Keep the .git directories.
    --fetch-submodules Fetch submodules.
    --builder       Clone as fetchgit does, but url, rev, and out option are mandatory.
USAGE
  exit 1
}

argi=0
argfun=""
for arg; do
    if test -z "$argfun"; then
        case $arg in
            --out) argfun=set_out;;
            --url) argfun=set_url;;
            --rev) argfun=set_rev;;
            --hash) argfun=set_hashType;;
            --branch-name) argfun=set_branchName;;
            --deepClone) deepClone=true;;
            --no-deepClone) deepClone=false;;
            --leave-dotGit) leaveDotGit=true;;
            --fetch-submodules) fetchSubmodules=true;;
            --builder) builder=true;;
            --help) usage; exit;;
            *)
                argi=$(($argi + 1))
                case $argi in
                    1) url=$arg;;
                    2) rev=$arg;;
                    3) expHash=$arg;;
                    *) exit 1;;
                esac
                ;;
        esac
    else
        case $argfun in
            set_*)
                var=$(echo $argfun | sed 's,^set_,,')
                eval $var=$arg
                ;;
        esac
        argfun=""
    fi
done

if test -z "$url"; then
    usage
fi

# Returns a name based on the url and reference
#
# This function needs to be in sync with nix's fetchgit implementation
# of urlToName() to re-use the same nix store paths.
url_to_name(){
    local url=$1
    local ref=$2
    # basename removes the / and .git suffixes
    local base=$(basename "$url" .git)

    if [[ $ref =~ [a-z0-9]+ ]]; then
        echo "$base-${ref:0:7}"
    else
        echo $base
    fi
}

clone(){
    local dir="$1"
    local url="$2"
    local ref="$3"

    # Ensure we have a repo
    git init "$dir"
    git -C "$dir" remote add origin "$url" || git -C "$dir" remote set-url origin "$url"

    # Download data from the repository.
    local args=()
    local submoduleArgs=()
    if "$deepClone"; then
      submoduleArgs+=('--no-recommend-shallow')
      (set -x; git -C "$dir" fetch "${args[@]}" origin)
      (set -x; git -C "$dir" checkout "$ref")
    else
      args+=('--depth' '1')
      (set -x; git -C "$dir" fetch "${args[@]}" origin "$ref")
      (set -x; git -C "$dir" checkout FETCH_HEAD)
    fi
    if test -n "$fetchSubmodules"; then
      (set -x; git -C "$dir" submodule update --init --recursive "${args[@]}" "${submoduleArgs[@]}")
    fi
}

# Remove all remote branches, remove tags not reachable from HEAD, do a full
# repack and then garbage collect unreferenced objects.
make_deterministic_repo(){
    local repo="$1"

    # run in sub-shell to not touch current working directory
    (
    cd "$repo"
    # Remove files that contain timestamps or otherwise have non-deterministic
    # properties.
    rm -rf .git/logs/ .git/hooks/ .git/index .git/FETCH_HEAD .git/ORIG_HEAD \
        .git/refs/remotes/origin/HEAD .git/config

    # Remove all remote branches.
    git branch -r | while read branch; do
        git branch -rD "$branch" >&2
    done

    # Remove tags not reachable from HEAD. If we're exactly on a tag, don't
    # delete it.
    maybe_tag=$(git tag --points-at HEAD)
    git tag --contains HEAD | while read tag; do
        if [ "$tag" != "$maybe_tag" ]; then
            git tag -d "$tag" >&2
        fi
    done

    # Do a full repack. Must run single-threaded, or else we lose determinism.
    git config pack.threads 1
    git repack -A -d -f
    rm -f .git/config

    # Garbage collect unreferenced objects.
    git gc --prune=all
    )
}


clone_user_rev() {
    local name="$1"
    local out="$2"
    local url="$3"
    local rev="${4:-HEAD}"

    local tmpdir="$TMPDIR"
    if [ -z "$TMPDIR" ]; then
      tmpdir="$(basename "$tarball")"
    fi

    local dir="$tmpdir/$name"

    # Perform the checkout.
    clone "$dir" "$url" "$rev" 1>&2

    # Allow doing additional processing before .git removal
    eval "$NIX_PREFETCH_GIT_CHECKOUT_HOOK"
    if test -z "$leaveDotGit"; then
        echo "removing \`.git'..." >&2
        find $dir -name .git\* | xargs rm -rf
    else
        find $dir -name .git | while read gitdir; do
            make_deterministic_repo "$(readlink -f "$gitdir/..")"
        done
    fi

    echo "Building Archive $out" >&2
    cd "$tmpdir"
    SOURCE_DATE_EPOCH=946713600 deterministic-zip "$name" >"$out"
}

if test -z "$branchName"; then
    branchName=fetchgit
fi

if test -n "$builder"; then
    test -n "$out" -a -n "$url" -a -n "$rev" || usage
    clone_user_rev "${innerName}" "$out" "$url" "$rev"
    lhash="$(openssl "$outputHashAlgo" -r -hex "$out" 2>/dev/null | awk '{print $1;}')"
    if [ "${lhash,,}" != "${HEX_HASH,,}" ]; then
      str="Got a bad hash:\n"
      str+="  URL: $url\n"
      str+="  File: $out\n"
      str+="  Hash: $lhash\n"
      echo -e -n "$str" >&2
      exit 1
    fi
else
    if test -z "$hashType"; then
        hashType=sha256
    fi

    # If the hash was given, a file with that hash may already be in the
    # store.
    if test -n "$expHash"; then
        finalPath=$(nix-store --print-fixed-path --recursive "$hashType" "$expHash" "$(url_to_name "$url" "$rev")")
        if ! nix-store --check-validity "$finalPath" 2> /dev/null; then
            finalPath=
        fi
        hash=$expHash
    fi

    # If we don't know the hash or a path with that hash doesn't exist,
    # download the file and add it to the store.
    if test -z "$finalPath"; then

        tmpPath="$(mktemp -d "${TMPDIR:-/tmp}/git-checkout-tmp-XXXXXXXX")"
        trap "rm -rf \"$tmpPath\"" EXIT

        tmpFile="$tmpPath/$(url_to_name "$url" "$rev").tar.br"
        mkdir "$tmpFile"

        # Perform the checkout.
        clone_user_rev "$(url_to_name "$url" "$rev")" "$tmpFile" "$url" "$rev"

        # Compute the hash.
        hash=$(nix-hash --type $hashType $hashFormat $tmpFile)
        if ! test -n "$QUIET"; then echo "hash is $hash" >&2; fi

        # Add the downloaded file to the Nix store.
        finalPath=$(nix-store --add-fixed --recursive "$hashType" "$tmpFile")

        if test -n "$expHash" -a "$expHash" != "$hash"; then
            echo "hash mismatch for URL \`$url'"
            exit 1
        fi
    fi

    if ! test -n "$QUIET"; then echo "path is $finalPath" >&2; fi

    echo $hash

    if test -n "$PRINT_PATH"; then
        echo $finalPath
    fi
fi
